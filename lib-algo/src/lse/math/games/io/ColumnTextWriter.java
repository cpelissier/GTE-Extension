package lse.math.games.io;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class ColumnTextWriter 
{
	private static final String newline = System.getProperty("line.separator");
	
	/* contains in succession all strings generated by  colpr 
	 * Each array is one row (ended by using newRow())
	 * Does not include current active row (currline) 	
	 */
	private List<List<String>> buf = new ArrayList<List<String>>(); 

    private int ncols = 0;       									/* max number of columns               			*/
    private List<Integer> colwidth = new ArrayList<Integer>();   	/* [0..ncols-1]  output widths         			*/
    private List<Integer> widthsign = new ArrayList<Integer>();  	/* -1 for left, 1 for right alignment  			*/
    private int currcol = 0;
    private List<String> currline = new ArrayList<String>();    
    
    private String clean = null;
    
    /*private void reset() {
    	buf.clear();
        ncols = 0;       	
        colwidth.clear();   
        widthsign.clear();  
        currcol = 0;     	
        currline.clear();	
    }*/
	
    public void writeCol(int i)
    {
    	writeCol(String.valueOf(i));
    }

    /* making column  c  in  0..ncols-1  left-adjusted      */
    public void alignLeft(int c)    
    {
    	clean = null;
        widthsign.set(c, -1);
    }
    
    /* making next column written to left-adjusted      */
    public void alignLeft()    
    {
    	if (currcol == 0) return;
    	alignLeft(currcol - 1);
    }
    
    public void alignRight(int c)
    {
    	clean = null;
    	widthsign.set(c, 1);
    }
    
    public void alignRight()
    {
    	alignRight(currcol);
    }
    
    private void printRow(StringWriter output, List<String> s)
    {    	
        for (int j = 0; j < s.size(); j++)
        {
        	int width = colwidth.get(j) * widthsign.get(j);        		
        	if (width != 0) {
	            String format = String.format("%%%ds", width);
	            output.write(String.format(format, s.get(j)));
	
	            if (j < s.size() - 1)   	/* avoid trailing blanks in line        */
	                output.write(" ");    	/* more sophisticated spacing possible  */     
        	} else {
        		//System.out.println("column " + j + " is width 0");
        	}
        }        
    }

    private void print(StringWriter output)
    {                	
    	for (List<String> line : buf)
    	{	        	
    		printRow(output, line);	        
    		output.write(newline);
    	}
    	printRow(output, currline); //Do we want a newline here?
    	//reset();    	
    }
    
    public String toString() {
    	if (clean == null) {
	    	StringWriter output = new StringWriter();
	    	print(output);
	    	clean = output.toString();
    	}
    	return clean;
    }

    public void writeCol(String s)
    {        
    	clean = null;
        int w = s.length(); 
        if (currcol == colwidth.size()) {        	
        	colwidth.add(w);
        	widthsign.add(1);
        } else if (colwidth.get(currcol) < w) {
            colwidth.set(currcol, w);
        }

        currline.add(s);
        
        ++currcol;        
    }

    public void endRow()
    {
    	clean = null;
    	buf.add(currline);
        currcol = 0;
        currline = new ArrayList<String>(ncols);
    }
    
    public void sortBy(final int col, final int fromRow)
    {
    	clean = null;
    	List<List<String>> subBuf = buf.subList(fromRow, buf.size());
    	buf = buf.subList(0, fromRow);
    	Collections.sort(subBuf, new Comparator<List<String>>() {
			
			public int compare(List<String> a, List<String> b) {
				String aStr = a.get(col);
				String bStr = b.get(col);
				try {
					return Integer.valueOf(aStr).compareTo(Integer.valueOf(bStr)); 
				} catch (NumberFormatException ex) {
					return aStr.compareTo(bStr);
				}				
			}
    		
    	});
    	buf.addAll(subBuf);    	
    }

    // old style static methods
    private static final ColumnTextWriter instance = new ColumnTextWriter(); 
    private static final Writer sysout = new BufferedWriter(new OutputStreamWriter(System.out));
    
    public static void colpr(String s)
    {
    	instance.writeCol(s);
    }

    public static void colipr(int i)
    {
        instance.writeCol(i);
    }

    public static void colnl()
    {
    	instance.endRow();
    }

    public static void colleft(int n)
    {
    	instance.alignLeft(n);
    }

    public static void colout() throws IOException
    {
        sysout.write(instance.toString());
    }
    
    public static void colout(Writer output) throws IOException
    {
    	output.write(instance.toString());
    }
}
